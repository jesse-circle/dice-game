version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.11.0
  gcp-gcr: circleci/gcp-gcr@0.7.1
  aws-ecr: circleci/aws-ecr@6.8.2
  gcp-gke: circleci/gcp-gke@1.0.4
  aws-eks: circleci/aws-eks@0.2.7
  win: circleci/windows@2.2.0 

jobs:
  build:
    parameters:
      version: 
        type: string
    docker:
      - image: circleci/golang:<< parameters.version >>
    working_directory: /go/src/github.com/mentat/circle-demo-go
    steps:
      - checkout
      - run: go get -v -t -d ./...
      - run: mkdir -p workspace/<< parameters.version >>
      - run: go test -c -o workspace/<< parameters.version >>/test
      - run: go build -o workspace/<< parameters.version >>/circleci
      - run: cp -r templates workspace/<< parameters.version >>/
      - persist_to_workspace:
          root: workspace
          paths:
            - << parameters.version >>/test
            - << parameters.version >>/circleci
            - << parameters.version >>/templates
  build-windows:
    executor:
      name: win/default 
      size: "medium"
    steps:
      - checkout
      - run:
         command: go build -o circleci
         shell: bash --login -eo pipefail
      - store_artifacts:
          path: circleci
          destination: circleci
  test:
    parameters:
      version: 
        type: string
    docker:
      - image: chromedp/headless-shell:latest
    #resource_class: large
    working_directory: /go/src/github.com/mentat/circle-demo-go
    steps:
      - run: apt-get update && apt-get -y install ca-certificates
      - attach_workspace:
          at: /tmp/workspace
      - run: cd /tmp/workspace/<< parameters.version >> && ./test
  security:
    docker:
      - image: chromedp/headless-shell:latest
    working_directory: /go/src/github.com/mentat/circle-demo-go
    steps:
      - run: apt-get update && apt-get -y install ca-certificates
      - attach_workspace:
          at: /tmp/workspace
      - run: cd /tmp/workspace/<< parameters.version >> && ./test
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: "${AWS_REGION}"
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/deployment.yml
          resource-name: deployment/demo-app
workflows:
  version: 2
  test_and_deploy:
    jobs:
      - build:
          matrix:
            parameters:
              version: ["1.11", "1.12", "1.13"]
      - test:
          matrix:
            parameters:
              version: ["1.11", "1.12", "1.13"]
          requires:
          - build
      - aws-ecr/build-and-push-image:
          attach-workspace: true
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "latest"
          requires:
          - test
      - create-deployment:
          cluster-name: jlovelace-demo-k8s
          requires:
            - aws-ecr/build-and-push-image
      #- gcp-gcr/build-and-push-image:
      #    image: my-image
      #    registry-url: us.gcr.io
      #- request-testing:
      #  type: approval
      #  requires:
      #    - build
